/*
 * UploadCheckerView.java
 */

package uploadchecker;

import java.awt.event.ItemEvent;
import java.net.MalformedURLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.gudy.azureus2.core3.torrent.TOTorrentException;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URL;
import javax.swing.DefaultListModel;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;
import org.gudy.azureus2.core3.torrent.TOTorrent;
import org.gudy.azureus2.core3.torrent.TOTorrentCreator;
import org.gudy.azureus2.core3.torrent.TOTorrentFactory;
import org.gudy.azureus2.core3.torrent.TOTorrentProgressListener;

/**
 * The application's main frame.
 */
public class UploadCheckerView extends FrameView {

    public UploadCheckerView(SingleFrameApplication app) {
        super(app);
        
        initComponents();

        dirPath = (new File(this.getClass().getProtectionDomain().getCodeSource()
            .getLocation().getFile()).getParent()).replace("%20"," ");

        try {
            ObjectInputStream ois = new ObjectInputStream(
                    new FileInputStream(dirPath + "\\" + "settings.db"));
            url = (String) ois.readObject();
        } catch (Exception ex) {
            url = null;
        }

        announceTextField.setText(url == null ? "" : url);

        this.getFrame().setTitle("Upload Checker");
        
        fileList.setModel(new DefaultListModel());
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = UploadCheckerApp.getApplication().getMainFrame();
            aboutBox = new UploadCheckerAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        UploadCheckerApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        removeButton = new javax.swing.JButton();
        comboBox = new javax.swing.JComboBox();
        filesScrollPane = new javax.swing.JScrollPane();
        fileList = new javax.swing.JList();
        outputScrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        createButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        addMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        mediaInfoCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        settingsMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        fileChooser = new javax.swing.JFileChooser();
        settingsFrame = new javax.swing.JFrame();
        announceLabel = new javax.swing.JLabel();
        announceTextField = new javax.swing.JTextField();
        torrFrame = new javax.swing.JFrame();
        progressBar = new javax.swing.JProgressBar();
        taskLabel = new javax.swing.JLabel();
        mediaInfoFrame = new javax.swing.JFrame();
        mediaInfoScrollPane = new javax.swing.JScrollPane();
        mediaInfoTextArea = new javax.swing.JTextArea();

        mainPanel.setName("mainPanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(uploadchecker.UploadCheckerApp.class).getContext().getResourceMap(UploadCheckerView.class);
        removeButton.setText(resourceMap.getString("removeButton.text")); // NOI18N
        removeButton.setName("removeButton"); // NOI18N
        removeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeButtonActionPerformed(evt);
            }
        });

        comboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1080p Normal movie", "1080p Animation", "720p Normal movie", "720p Animation" }));
        comboBox.setName("comboBox"); // NOI18N
        comboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboBoxItemStateChanged(evt);
            }
        });

        filesScrollPane.setName("filesScrollPane"); // NOI18N

        fileList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fileList.setName("fileList"); // NOI18N
        fileList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fileListValueChanged(evt);
            }
        });
        filesScrollPane.setViewportView(fileList);

        outputScrollPane.setName("outputScrollPane"); // NOI18N

        textArea.setColumns(20);
        textArea.setEditable(false);
        textArea.setRows(5);
        textArea.setName("textArea"); // NOI18N
        outputScrollPane.setViewportView(textArea);

        createButton.setText(resourceMap.getString("createButton.text")); // NOI18N
        createButton.setName("createButton"); // NOI18N
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(113, 113, 113)
                .addComponent(createButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 104, Short.MAX_VALUE)
                .addComponent(removeButton)
                .addContainerGap())
            .addComponent(filesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
            .addComponent(outputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 535, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addComponent(filesScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(outputScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeButton)
                    .addComponent(createButton))
                .addContainerGap())
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        addMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        addMenuItem.setText(resourceMap.getString("addMenuItem.text")); // NOI18N
        addMenuItem.setName("addMenuItem"); // NOI18N
        addMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(addMenuItem);

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(uploadchecker.UploadCheckerApp.class).getContext().getActionMap(UploadCheckerView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        optionsMenu.setText(resourceMap.getString("optionsMenu.text")); // NOI18N
        optionsMenu.setName("optionsMenu"); // NOI18N

        mediaInfoCheckBoxMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        mediaInfoCheckBoxMenuItem.setText(resourceMap.getString("mediaInfoCheckBoxMenuItem.text")); // NOI18N
        mediaInfoCheckBoxMenuItem.setName("mediaInfoCheckBoxMenuItem"); // NOI18N
        mediaInfoCheckBoxMenuItem.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                mediaInfoCheckBoxMenuItemItemStateChanged(evt);
            }
        });
        optionsMenu.add(mediaInfoCheckBoxMenuItem);

        settingsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        settingsMenuItem.setText(resourceMap.getString("settingsMenuItem.text")); // NOI18N
        settingsMenuItem.setName("settingsMenuItem"); // NOI18N
        settingsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsMenuItemActionPerformed(evt);
            }
        });
        optionsMenu.add(settingsMenuItem);

        menuBar.add(optionsMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        fileChooser.setName("fileChooser"); // NOI18N

        settingsFrame.setTitle(resourceMap.getString("settingsFrame.title")); // NOI18N
        settingsFrame.setName("settingsFrame"); // NOI18N
        settingsFrame.setResizable(false);
        settingsFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                settingsFrameWindowClosing(evt);
            }
        });

        announceLabel.setText(resourceMap.getString("announceLabel.text")); // NOI18N
        announceLabel.setName("announceLabel"); // NOI18N

        announceTextField.setText(resourceMap.getString("announceTextField.text")); // NOI18N
        announceTextField.setToolTipText(resourceMap.getString("announceTextField.toolTipText")); // NOI18N
        announceTextField.setName("announceTextField"); // NOI18N

        javax.swing.GroupLayout settingsFrameLayout = new javax.swing.GroupLayout(settingsFrame.getContentPane());
        settingsFrame.getContentPane().setLayout(settingsFrameLayout);
        settingsFrameLayout.setHorizontalGroup(
            settingsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(announceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(announceTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 102, Short.MAX_VALUE)
                .addContainerGap())
        );
        settingsFrameLayout.setVerticalGroup(
            settingsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(settingsFrameLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(announceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(announceTextField))
                .addContainerGap())
        );

        torrFrame.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        torrFrame.setName("torrFrame"); // NOI18N
        torrFrame.setResizable(false);

        progressBar.setName("progressBar"); // NOI18N

        taskLabel.setText(resourceMap.getString("taskLabel.text")); // NOI18N
        taskLabel.setName("taskLabel"); // NOI18N

        javax.swing.GroupLayout torrFrameLayout = new javax.swing.GroupLayout(torrFrame.getContentPane());
        torrFrame.getContentPane().setLayout(torrFrameLayout);
        torrFrameLayout.setHorizontalGroup(
            torrFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, torrFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(torrFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(taskLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                .addGap(10, 10, 10))
        );
        torrFrameLayout.setVerticalGroup(
            torrFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(torrFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(taskLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
                .addGap(9, 9, 9)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addContainerGap())
        );

        mediaInfoFrame.setTitle(resourceMap.getString("mediaInfoFrame.title")); // NOI18N
        mediaInfoFrame.setName("mediaInfoFrame"); // NOI18N
        mediaInfoFrame.addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                mediaInfoFrameWindowClosing(evt);
            }
        });

        mediaInfoScrollPane.setName("mediaInfoScrollPane"); // NOI18N

        mediaInfoTextArea.setColumns(20);
        mediaInfoTextArea.setEditable(false);
        mediaInfoTextArea.setRows(5);
        mediaInfoTextArea.setName("mediaInfoTextArea"); // NOI18N
        mediaInfoScrollPane.setViewportView(mediaInfoTextArea);

        javax.swing.GroupLayout mediaInfoFrameLayout = new javax.swing.GroupLayout(mediaInfoFrame.getContentPane());
        mediaInfoFrame.getContentPane().setLayout(mediaInfoFrameLayout);
        mediaInfoFrameLayout.setHorizontalGroup(
            mediaInfoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mediaInfoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        mediaInfoFrameLayout.setVerticalGroup(
            mediaInfoFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mediaInfoScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void addMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMenuItemActionPerformed
        int returnVal = fileChooser.showOpenDialog(this.getFrame());

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            DefaultListModel model = (DefaultListModel) fileList.getModel();
            model.addElement(file.getAbsolutePath());
        }
    }//GEN-LAST:event_addMenuItemActionPerformed

    private void removeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeButtonActionPerformed
        int index = fileList.getSelectedIndex();
        if (index < 0) return ;
        else {
            DefaultListModel model = (DefaultListModel) fileList.getModel();
            model.remove(index);
        }
    }//GEN-LAST:event_removeButtonActionPerformed

    private void fileListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fileListValueChanged
        if (evt != null && evt.getValueIsAdjusting()) return;
        textArea.setText("");
        int index = fileList.getSelectedIndex();
        if (index < 0) return ;
        else {
            try {
                DefaultListModel model = (DefaultListModel) fileList.getModel();
                String s = (String) model.get(index);
                Media med = new Media(s);

                Report res = med.check(getCurrentType());
                textArea.setText(res.toFormatedString());
                mediaInfoTextArea.setText(med.getFormatedInfo());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this.getFrame(), ex.toString(),
                    "ERROR!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_fileListValueChanged

    private void comboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboBoxItemStateChanged
        fileListValueChanged(null);
    }//GEN-LAST:event_comboBoxItemStateChanged

    private void settingsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsMenuItemActionPerformed
        settingsFrame.setVisible(true);
        settingsFrame.pack();
        settingsFrame.setLocationRelativeTo(this.getFrame());
}//GEN-LAST:event_settingsMenuItemActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        URL url = null;
        if (announceTextField.getText() == null ||
                announceTextField.getText().trim().length() == 0) {
            JOptionPane.showMessageDialog(UploadCheckerView.this.getFrame(),
                    "First introduce your announce URL",
                    "Error!", JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            try {
                url = new URL(announceTextField.getText());
            } catch (MalformedURLException ex) {
                JOptionPane.showMessageDialog(UploadCheckerView.this.getFrame(),
                        "Malformed URL",
                        "Error!", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        final URL announceURL = url;

        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int returnVal = fileChooser.showOpenDialog(this.getComponent());
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            final File file = fileChooser.getSelectedFile();

            final JFrame torrFrame = new JFrame();
            final JProgressBar progressBar = new JProgressBar(0, 100);
            final JLabel taskLabel = new JLabel();

            torrFrame.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            torrFrame.setName("torrFrame");
            torrFrame.setResizable(false);

            progressBar.setName("progressBar");

            taskLabel.setName("taskLabel");

            javax.swing.GroupLayout torrFrameLayout = new javax.swing.GroupLayout(torrFrame.getContentPane());
            torrFrame.getContentPane().setLayout(torrFrameLayout);
            torrFrameLayout.setHorizontalGroup(
                    torrFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, torrFrameLayout.createSequentialGroup().addContainerGap().addGroup(torrFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(taskLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE).addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)).addGap(10, 10, 10)));
            torrFrameLayout.setVerticalGroup(
                    torrFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(torrFrameLayout.createSequentialGroup().addContainerGap().addComponent(taskLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE).addGap(9, 9, 9).addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE).addContainerGap()));

            progressBar.setValue(0);
            torrFrame.setResizable(false);
            torrFrame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            torrFrame.pack();
            torrFrame.setLocationRelativeTo(this.getFrame());
            torrFrame.setVisible(true);
            torrFrame.setTitle("Creating torrent");
            new Thread() {

                @Override
                public void run() {
                    try {
                        TOTorrentProgressListener list = new TOTorrentProgressListener() {

                            public void reportProgress(int p) {
                                progressBar.setValue(p);
                            }

                            public void reportCurrentTask(String task_description) {
                                taskLabel.setText("Task: " + task_description);
                            }
                        };

                        TOTorrentCreator c = TOTorrentFactory.createFromFileOrDirWithFixedPieceLength(
                                file, announceURL, 4 * 1024 * 1024);

                        c.addListener(list);

                        TOTorrent t = c.create();

                        t.setPrivate(true);

                        //t.print();

                        t.serialiseToBEncodedFile(new File(file.getParent() + "\\" + file.getName() + ".torrent"));

                        torrFrame.dispose();

                        JOptionPane.showMessageDialog(UploadCheckerView.this.getFrame(), "Torrent Complete",
                                "Done!", JOptionPane.INFORMATION_MESSAGE);
                    } catch (TOTorrentException ex) {
                        Logger.getLogger(UploadCheckerView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }.start();
        }
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
}//GEN-LAST:event_createButtonActionPerformed

    private void settingsFrameWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_settingsFrameWindowClosing
        if (announceTextField.getText() != null) {
            try {
                FileOutputStream fos = new FileOutputStream(dirPath + "\\" + "settings.db");
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                String trim = announceTextField.getText().trim();
                url = trim;
                oos.writeObject(url);
                fos.close();
                oos.close();
            } catch (Exception ex) { }
        }
    }//GEN-LAST:event_settingsFrameWindowClosing

    private void mediaInfoFrameWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_mediaInfoFrameWindowClosing
        mediaInfoCheckBoxMenuItem.setSelected(false);
    }//GEN-LAST:event_mediaInfoFrameWindowClosing

    private void mediaInfoCheckBoxMenuItemItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_mediaInfoCheckBoxMenuItemItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            mediaInfoFrame.setVisible(true);
            mediaInfoFrame.pack();
            mediaInfoFrame.setLocationRelativeTo(this.getFrame());
        } else mediaInfoFrame.setVisible(false);
}//GEN-LAST:event_mediaInfoCheckBoxMenuItemItemStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addMenuItem;
    private javax.swing.JLabel announceLabel;
    private javax.swing.JTextField announceTextField;
    private javax.swing.JComboBox comboBox;
    private javax.swing.JButton createButton;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JList fileList;
    private javax.swing.JScrollPane filesScrollPane;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JCheckBoxMenuItem mediaInfoCheckBoxMenuItem;
    private javax.swing.JFrame mediaInfoFrame;
    private javax.swing.JScrollPane mediaInfoScrollPane;
    private javax.swing.JTextArea mediaInfoTextArea;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton removeButton;
    private javax.swing.JFrame settingsFrame;
    private javax.swing.JMenuItem settingsMenuItem;
    private javax.swing.JLabel taskLabel;
    private javax.swing.JTextArea textArea;
    private javax.swing.JFrame torrFrame;
    // End of variables declaration//GEN-END:variables

    private JDialog aboutBox;

    private String url;

    private String dirPath;

    private Media.Type getCurrentType() {
        int index = comboBox.getSelectedIndex();
        if (index < 0) return Media.Type.Movie1080p;
        else {
            switch(index) {
                case 0: return Media.Type.Movie1080p;
                case 1: return Media.Type.Animation1080p;
                case 2: return Media.Type.Movie720p;
                case 3: return Media.Type.Animation720p;
                default: return Media.Type.Movie1080p;
            }
        }
    }
}
